/*******************************************************************************
 * Copyright (c) 2007 Innoopract Informationssysteme GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Innoopract Informationssysteme GmbH - initial API and implementation
 ******************************************************************************/

package org.eclipse.swt.internal.theme;


public class ThemeWriter {
  
  private final String id;
  private final String name;
  private StringBuffer code;
  private boolean headWritten;
  private boolean tailWritten;
  private boolean valueWritten;
  private int type;
  
  public static final int META = 1;
  public static final int COLOR = 2;
  public static final int BORDER = 3;
  
  // TODO [rst] Clarify what the use of the theme title is, remove the name
  //      parameter if unnecessary
  public ThemeWriter( final String id, final String name, final int type ) {
    this.id = id;
    this.name = name;
    this.type = checkType( type );
    this.code = new StringBuffer();
    headWritten = false;
    tailWritten = false;
    valueWritten = false;
  }
  
  public void writeColor( final String key, final QxColor color ) {
    if( type != COLOR ) {
      throw new IllegalStateException( "Color can only be set in color themes" );
    }
    if( !headWritten ) {
      writeHead();
    }
    if( tailWritten ) {
      throw new IllegalStateException( "Tail already written" );
    }
    if( valueWritten ) {
      code.append( ",\n" );
    }
    code.append( "    \"" + key + "\" : " );
    code.append( "[ " );
    code.append( color.red );
    code.append( ", " );
    code.append( color.green );
    code.append( ", " );
    code.append( color.blue );
    code.append( " ]" );
    valueWritten = true;
  }
  
  public void writeBorder( final String key, final QxBorder border ) {
    if( type != BORDER ) {
      throw new IllegalStateException( "Border can only be set in border themes" );
    }
    if( !headWritten ) {
      writeHead();
    }
    if( tailWritten ) {
      throw new IllegalStateException( "Tail already written" );
    }
    if( valueWritten ) {
      code.append( ",\n" );
    }
    code.append( "    \"" + key + "\" : " );
    code.append( "{ width = " );
    code.append( border.width );
    code.append( ", style = \"" );
    code.append( border.style );
    code.append( "\", color = \"" );
    code.append( border.color );
    code.append( "\" }" );
    valueWritten = true;
  }
  
  public void writeTheme( final String key, final String value ) {
    if( type != META ) {
      throw new IllegalStateException( "Border can only be set in border themes" );
    }
    if( !headWritten ) {
      writeHead();
    }
    if( tailWritten ) {
      throw new IllegalStateException( "Tail already written" );
    }
    if( valueWritten ) {
      code.append( ",\n" );
    }
    code.append( "    \"" + key + "\" : " );
    code.append( value );
    valueWritten = true;
  }
  
  public String getGeneratedCode() {
    if( !tailWritten ) {
      writeTail();
    }
    return code.toString();
  }
  
  private void writeHead() {
    code.append( "/*\n" );
    code.append( " * Theme file generated by ThemeWriter. Do not edit.\n" );
    code.append( " */\n\n" );
    code.append( "qx.Theme.define( \"" + id + getNameSuffix() + "\",\n" );
    code.append( "{\n" );
    String title = name;
    code.append( "  title : \"" + title + "\",\n" );
    if( type == META ) {
      code.append( "  meta : {\n" );
    } else if( type == COLOR ) {
      code.append( "  colors : {\n" );
    } else if( type == BORDER ) {
      code.append( "  borders : {\n" );
    }
    headWritten = true;
  }
  
  private void writeTail() {
    code.append( "\n" );
    code.append( "  }\n" );
    code.append( "} );\n" );
    tailWritten = true;
  }
  
  private int checkType( final int type ) {
    if( type != META && type != COLOR && type != BORDER ) {
      throw new IllegalArgumentException( "empty argument" );
    }
    return type;
  }
  
  private String getNameSuffix() {
    String result = "";
    if( type == COLOR ) {
      result = "Colors";
    } else if( type == BORDER ) {
      result = "Borders";
    }
    return result;
  }
}
