/******************************************************************************* * Copyright (c) 2007 Innoopract Informationssysteme GmbH. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     Innoopract Informationssysteme GmbH - initial API and implementation ******************************************************************************/package org.eclipse.swt.internal.widgets.shellkit;import org.eclipse.swt.SWT;import org.eclipse.swt.graphics.Color;import org.eclipse.swt.graphics.Font;import org.eclipse.swt.internal.graphics.FontSizeCalculator;import org.eclipse.swt.internal.theme.*;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.Shell;public class ShellThemeAdapter implements IShellThemeAdapter {  private static final int MENU_BAR_HEIGHT = 20;  public QxBoxDimensions getPadding( final Shell shell ) {    Theme theme = ThemeUtil.getTheme();    QxBoxDimensions result;    if( ( shell.getStyle() & SWT.TITLE ) != 0 ) {      result = theme.getBoxDimensions( "shell.padding" );    } else {      result = new QxBoxDimensions( 0, 0, 0, 0 );    }    return result;  }  public QxBoxDimensions getTitleBarMargin( final Shell shell ) {    Theme theme = ThemeUtil.getTheme();    QxBoxDimensions result;    if( ( shell.getStyle() & SWT.TITLE ) != 0 ) {      result = theme.getBoxDimensions( "shell.title.margin" );    } else {      result = new QxBoxDimensions( 0, 0, 0, 0 );    }    return result;  }  public int getBorderWidth( final Control control ) {    Theme theme = ThemeUtil.getTheme();    QxBorder border;    Shell shell = ( Shell )control;    if( ( shell.getStyle() & ( SWT.BORDER | SWT.TITLE ) ) != -1        && !shell.getMaximized() )    {      border = theme.getBorder( "shell.BORDER.border" );    } else {      border = theme.getBorder( "shell.border" );    }    return border.width;  }  public Color getForeground( final Control control ) {    Theme theme = ThemeUtil.getTheme();    QxColor color = theme.getColor( "widget.foreground" );    return QxColor.createColor( color );  }  public Color getBackground( final Control control ) {    Theme theme = ThemeUtil.getTheme();    QxColor color = theme.getColor( "shell.background" );    return QxColor.createColor( color );  }  public int getTitleBarHeight( final Shell shell ) {    int result = 0;    if( ( shell.getStyle() & SWT.TITLE ) != 0 ) {      Theme theme = ThemeUtil.getTheme();      QxDimension height = theme.getDimension( "shell.title.height" );      result = height.value;    }    return result;  }  public int getMenuBarHeight( final Shell shell ) {    int fontHeight = FontSizeCalculator.getCharHeight( shell.getFont() );    int menuBarHeight = Math.max( MENU_BAR_HEIGHT, fontHeight );    return shell.getMenuBar() != null ? menuBarHeight : 0;  }  public Font getFont( final Control control ) {    Theme theme = ThemeUtil.getTheme();    QxFont font = theme.getFont( "widget.font" );    return QxFont.createFont( font );  }}