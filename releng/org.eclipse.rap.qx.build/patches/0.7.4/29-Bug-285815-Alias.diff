--- qx-build/source/class/qx/io/Alias.js	10 Dec 2008 16:57:52 -0000	1.1
+++ qx-build/source/class/qx/io/Alias.js	3 Sep 2009 10:06:16 -0000
@@ -79,69 +79,114 @@
     _preprocess : function(value)
     {
       var dynamics = this._dynamic;
-
-      if (dynamics[value] === false)
-      {
+      
+      if (dynamics[value] === false) {
+        // Resource already marked as "unmanaged"
         return value;
       }
       else if (dynamics[value] === undefined)
       {
-        if (value.charAt(0) === "/" || value.charAt(0) === "." || value.indexOf("http://") === 0 || value.indexOf("https://") === 0 || value.indexOf("file://") === 0)
+        if (value.indexOf("http://") === 0 || value.indexOf("https://") === 0 || 
+            value.indexOf("file://") === 0)
         {
+          // Mark absolute URLs as unmanaged and leave them as is
           dynamics[value] = false;
           return value;
         }
-
+        
         var alias = value.substring(0, value.indexOf("/"));
         var resolved = this._aliases[alias];
-
-        if (resolved !== undefined) {
-          var urlPrefix = "";
-
-          /*
-           * To avoid a "mixed content" warning in IE when the application is
-           * delivered via HTTPS a prefix has to be added. This will transform the
-           * relative URL to an absolute one in IE.
-           * Though this warning is only displayed in conjunction with images which
-           * are referenced as a CSS "background-image", every resource path is
-           * changed when the application is served with HTTPS.
-           */
+        
+        if (resolved === undefined)
+        {
           if (qx.core.Variant.isSet("qx.client", "mshtml"))
           {
             if (window.location.protocol === "https:")
             {
-              /*
-               * SPECIAL CASE
-               * It is valid to to begin a URL with "//" so this case has to
-               * be considered. If the to resolved URL begins with "//" the
-               * manager prefixes it with "https:" to avoid any problems for IE
-               */
-              if (resolved.match(/^\/\//) != null) {
-                urlPrefix = window.location.protocol;
-              }
-              /*
-               * If the resolved URL begins with "./" the final URL has to be
-               * put together using the document.URL property.
-               * IMPORTANT: this is only applicable for the source version
-               */
-              else if (resolved.match(/^\.\//) != null && qx.core.Setting.get("qx.isSource"))
-              {
-                resolved  = "/" + value.substring(0, alias.length);
-                urlPrefix = document.URL.substring(0, document.URL.lastIndexOf("/"));
-              }
-              else
+              var firstCharPointOrSlash = value.match(/^[\.\/]/);
+              var firstCharAlphaNumeric = value.match(/^\w/);
+              
+              if (firstCharPointOrSlash != null || firstCharAlphaNumeric != null)
               {
-                urlPrefix = window.location.href.substring(0, window.location.href.lastIndexOf("/") + 1);
+                // rewrite unmanaged relative URL to an absolute if necessary
+                // prefix any URL starting with an alphanumeric char
+                if (firstCharAlphaNumeric != null && firstCharPointOrSlash == null) {
+                  value = "./" + value;
+                }
+                
+                return this.__rewriteUrl(value);
               }
             }
           }
-
-          dynamics[value] = urlPrefix + resolved + value.substring(alias.length);
+          return value;
+        } 
+        else
+        { 
+          // rewrite relative URL to an absolute if necessary
+          if (qx.core.Variant.isSet("qx.client", "mshtml")) {
+            if (window.location.protocol === "https:") {
+              resolved = this.__rewriteUrl(resolved);
+            }
+          }
+          
+          dynamics[value] = resolved + value.substring(alias.length);
         }
       }
-
+      
       return value;
     },
+    
+    
+    /**
+     * Rewrites an relative URL to an absolute one to prevent the "mixed content"
+     * warning under HTTPS in IE. 
+     * 
+     * @param value {String} Url of resource to rewrite for HTTPS
+     * @return {String} rewritten absolute URL 
+     */
+    __rewriteUrl : function(value)
+    {
+      // To avoid a "mixed content" warning in IE when the application is
+      // delivered via HTTPS a prefix has to be added. This will transform the
+      // relative URL to an absolute one in IE.
+      // Though this warning is only displayed in conjunction with images which
+      // are referenced as a CSS "background-image", every resource path is
+      // changed when the application is served with HTTPS.
+       
+      var urlPrefix = "";
+      
+      // SPECIAL CASE
+      // It is valid to to begin a URL with "//" so this case has to
+      // be considered. If the to resolved URL begins with "//" the
+      // manager prefixes it with "https:" to avoid any problems for IE
+      if (value.match(/^\/\//) != null) {
+        urlPrefix = window.location.protocol;
+      }
+      // If the resolved URL begins with "./" the final URL has to be
+      // put together using the document.URL property.
+      // IMPORTANT: this is only applicable for the source version, because
+      // the build version does itself add a "/" at the end of the URL. This 
+      // would end up with e.g. "build//example.png" instead of "build/./example.png"
+      else if (value.match(/^\.\//) != null && qx.core.Setting.get("qx.isSource"))
+      {
+        value = value.substring(1);
+        urlPrefix = document.URL.substring(0, document.URL.lastIndexOf("/"));
+      }
+      // Prefix an relative URL beginning with "/" with the protocol and the 
+      // host e.g. "https://yourdomain.com"
+      else if (value.match(/^\//)) {
+        urlPrefix = window.location.protocol + "//" + window.location.host;
+      }
+      // Let absolute URLs pass through (HTTPS and HTTP)
+      else if (value.match(/^http/) != null) {
+        // nothing to do
+      }
+      else {
+        urlPrefix = window.location.href.substring(0, window.location.href.lastIndexOf("/") + 1);
+      }
+      
+      return urlPrefix + value;
+    },
 
 
     /**
