--- qx-build/source/class/qx/Class.js	10 Dec 2008 16:57:53 -0000	1.1
+++ qx-build/source/class/qx/Class.js	18 Feb 2010 15:32:32 -0000
@@ -1507,43 +1507,42 @@
      */
     __wrapConstructor : function(construct, name, type)
     {
-      var code = [];
+      var wrapper = function() {
 
-      // We can access the class/statics using arguments.callee
-      code.push('var clazz=arguments.callee.constructor;');
-
-      if (qx.core.Variant.isSet("qx.debug", "on"))
-      {
-        // new keyword check
-        code.push('if(!(this instanceof clazz))throw new Error("Please initialize ', name, ' objects using the new keyword!");');
-
-        // add abstract and singleton checks
-        if (type === "abstract") {
-          code.push('if(this.classname===', name, '.classname)throw new Error("The class ', name, ' is abstract! It is not possible to instantiate it.");');
-        } else if (type === "singleton") {
-          code.push('if(!clazz.$$allowconstruct)throw new Error("The class ', name, ' is a singleton! It is not possible to instantiate it directly. Use the static getInstance() method instead.");');
+        // We can access the class/statics using arguments.callee
+        var clazz=arguments.callee.constructor;
+  
+        if (qx.core.Variant.isSet("qx.debug", "on"))
+        {
+          // new keyword check
+          if(!(this instanceof clazz))throw new Error("Please initialize " + name + " objects using the new keyword!");
+  
+          // add abstract and singleton checks
+          if (type === "abstract") {
+            if(this.classname===name)throw new Error("The class " + name + " is abstract! It is not possible to instantiate it.");
+          } else if (type === "singleton") {
+            if(!clazz.$$allowconstruct)throw new Error("The class " + name + " is a singleton! It is not possible to instantiate it directly. Use the static getInstance() method instead.");
+          }
         }
-      }
-
-      // Attach local properties
-      code.push('if(!clazz.$$propertiesAttached)qx.core.Property.attach(clazz);');
-
-      // Execute default constructor
-      code.push('var retval=clazz.$$original.apply(this,arguments);');
+  
+        // Attach local properties
+        if(!clazz.$$propertiesAttached)qx.core.Property.attach(clazz);
+  
+        // Execute default constructor
+        var retval=clazz.$$original.apply(this,arguments);
+  
+        // Initialize local mixins
+        if(clazz.$$includes){var mixins=clazz.$$flatIncludes;
+        for(var i=0,l=mixins.length;i<l;i++){
+        if(mixins[i].$$constructor){mixins[i].$$constructor.apply(this,arguments);}}}
+  
+        // Mark instance as initialized
+        if(this.classname===', name, '.classname)this.$$initialized=true;
+  
+        // Return optional return value
+        return retval;
 
-      // Initialize local mixins
-      code.push('if(clazz.$$includes){var mixins=clazz.$$flatIncludes;');
-      code.push('for(var i=0,l=mixins.length;i<l;i++){');
-      code.push('if(mixins[i].$$constructor){mixins[i].$$constructor.apply(this,arguments);}}}');
-
-      // Mark instance as initialized
-      code.push('if(this.classname===', name, '.classname)this.$$initialized=true;');
-
-      // Return optional return value
-      code.push('return retval;');
-
-      // Parse code as function
-      var wrapper = new Function(code.join(""));
+      }
 
       if (qx.core.Variant.isSet("qx.aspects", "on")) {
         var aspectWrapper = qx.core.Aspect.wrap(name, wrapper, "constructor");
