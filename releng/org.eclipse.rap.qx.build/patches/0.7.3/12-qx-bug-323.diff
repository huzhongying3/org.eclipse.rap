### Eclipse Workspace Patch 1.0
#P org.eclipse.rap.tools
Index: qx-build/source/class/qx/Class.js
===================================================================
RCS file: /cvsroot/technology/org.eclipse.rap/org.eclipse.rap.tools/qx-build/source/class/qx/Class.js,v
retrieving revision 1.4
diff -u -r1.4 Class.js
--- qx-build/source/class/qx/Class.js 30 Jul 2008 16:31:20 -0000  1.4
+++ qx-build/source/class/qx/Class.js 10 Sep 2008 13:51:21 -0000
@@ -188,7 +188,7 @@
 
         // Attach members
         if (config.members) {
-          this.__addMembers(clazz, config.members, true, true);
+          this.__addMembers(clazz, config.members, true, true, false);
         }
 
         // Process events
@@ -1275,10 +1275,13 @@
      * @param clazz {Class} clazz to add members to
      * @param members {Map} The map of members to attach
      * @param patch {Boolean ? false} Enable patching of
-     * @param base (Boolean ? true) Attach base flag to mark function as members of this class
+     * @param base (Boolean ? true) Attach base flag to mark function as members
+     *     of this class
+     * @param wrap {Boolean ? false} Whether the member method should be wrapped.
+     *     this is needed to allow base calls in patched mixin members.
      * @return {void}
      */
-    __addMembers : function(clazz, members, patch, base)
+    __addMembers : function(clazz, members, patch, base, wrap)
     {
       var proto = clazz.prototype;
       var key, member;
@@ -1303,6 +1306,13 @@
         // Hint: Could not use typeof function because RegExp objects are functions, too
         if (base !== false && member instanceof Function)
         {
+          if (wrap == true)
+          {
+            // wrap "patched" mixin member
+            member = this.__mixinMemberWrapper(member, proto[key]);
+          }
+          else
+          {
           // Configure extend (named base here)
           // Hint: proto[key] is not yet overwritten here
           if (proto[key]) {
@@ -1310,6 +1320,7 @@
           }
 
           member.self = clazz;
+          }
 
           if (qx.core.Variant.isSet("qx.aspects", "on")) {
             member = qx.core.Aspect.wrap(clazz.classname + "." + key, member, "member");
@@ -1324,6 +1335,34 @@
 
 
     /**
+     * Wraps a member function of a mixin, which is included using "patch". This
+     * allows "base" calls in the mixin member function.
+     *
+     * @param member {Function} The mixin method to wrap
+     * @param base {Function} The overwritten method
+     * @return {Function} the wrapped mixin member
+     */
+    __mixinMemberWrapper : function(member, base)
+    {
+      if (base)
+      {
+        return function()
+        {
+          var oldBase = member.base;
+          member.base = base;
+          var retval = member.apply(this, arguments);
+          member.base = oldBase;
+          return retval;
+        }
+      }
+      else
+      {
+        return member;
+      }
+    },
+
+
+    /**
      * Add a single interface to a class
      *
      * @type static
@@ -1406,7 +1445,7 @@
 
         // Attach members (Respect patch setting, but dont apply base variables)
         if (entry.$$members) {
-          this.__addMembers(clazz, entry.$$members, patch, false);
+          this.__addMembers(clazz, entry.$$members, patch, patch, patch);
         }
       }
 
